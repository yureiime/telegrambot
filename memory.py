import os
from google.cloud import firestore
from typing import Any, List, Dict

os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = 'extended-signal-464909-k2-19723a7eff2c.json'
db = firestore.Client()

def get_user_memory(user_id: int) -> Dict:
    """Retrieves a user's memory from Firestore
    Fetches the document corresponding to the given user ID

    Args:
        user_id (int): Unique Telegram chat id 

    Returns:
        dict: A dictionary containing the user's memory data if it exists,
            else an empty dictionary
    """
    doc_ref = db.collection('users').document(str(user_id))
    doc = doc_ref.get()
    if doc.exists:
        return doc.to_dict()
    else:
        return {}

def update_user_memory(user_id: int, key: str, value: any) -> None:
    """Updates a user's memory in Firestore
    Adds or updates a key-value pair within the specified user's document.
    If the document does not exist, it is created

    Args:
        user_id (int): Unique Telegram chat id
        key (str): Name of the field to update or add in the user's memory
        value (any): Value for specified field
    """
    user_ref = db.collection('users').document(str(user_id))
    user_ref.set({key: value}, merge=True)


def add_conversation_history(
    user_id: int, user_message: str, bot_response: str
) -> None:
    """Adds a round of conversation to a user's history in Firestore.

    Records both the user's message and bot's response, stored as a log in
    the user's document under a subcollection conversation_history

    Args:
        user_id (int): Unique Telegram chat id
        user_message (str): Text sent by the user
        bot_response (str): Text generated by the bot
    """
    user_ref = db.collection("users").document(str(user_id))

    history_collection = user_ref.collection("conversation_history")

    history_collection.add(
        {
            "user_message": user_message,
            "bot_response": bot_response,
            "timestamp": firestore.SERVER_TIMESTAMP,
        }
    )


def get_recent_conversation_history(
    user_id: int, limit: int = 5
) -> List[Dict[str, Any]]:
    """Gets a small number of recent conversation turns from the user's history

    Fetch 'short-term memory' or 'context window' of recent interactions. This is
    passed to an LLM

    Args:
        user_id (int): Unique Telegram chat id
        limit (int, optional): Number of recent conversation turns. Defaults to 5

    Returns:
        list[dict]: A list of dictionaries, where each dictionary represents a
            conversation turn and contains user message, bot response, and timestamp.
            Also ordered chronologically from oldest to newest
    """
    user_ref = db.collection("users").document(str(user_id))
    history_collection = user_ref.collection("conversation_history")

    docs = (
        history_collection.order_by("timestamp", direction=firestore.Query.DESCENDING)
        .limit(limit)
        .stream()
    )

    history = []
    for doc in docs:
        history.append(doc.to_dict())

    return history[::-1]